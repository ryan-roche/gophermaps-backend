name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - '.github/workflows/ecs.yml'
      - 'Dockerfile'
  workflow_dispatch:

env:
  # Variables for building
  ECR_REGION: us-east-1
  ECR_REGISTRY_ALIAS: h1g5i3l5
  ECR_REPOSITORY: gophermaps

  # Variables for deployment
  ECS_REGION: us-east-2
  ECS_SERVICE: GopherMaps-Backend
  ECS_CLUSTER: GopherMaps
  ECS_TASK_DEFINITION_ARN: arn:aws:ecs:us-east-2:445567081553:task-definition/GopherMaps-Backend
  CONTAINER_NAME: fastapi

permissions:
  contents: read

jobs:
  build:
    name: Build & Push to ECR
    environment: Production
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}

    steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.ECR_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public

    - name: Build and tag new container image
      id: build-image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REGISTRY_ALIAS: ${{ env.ECR_REGISTRY_ALIAS }}
        REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx build --platform linux/arm64 -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
        echo "image=$REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: Push image to Amazon ECR
      id: push-image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REGISTRY_ALIAS: ${{ env.ECR_REGISTRY_ALIAS }}
        REPOSITORY: ${{ env.ECR_REPOSITORY  }}
        IMAGE_TAG: ${{ github.sha }}
      run: docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
        
  deploy:
    name: Deploy to ECS
    needs:
      build
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Configure AWS credentials for ECS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.ECS_REGION }}
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition-arn: ${{ env.ECS_TASK_DEFINITION_ARN }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ needs.build.outputs.image }}
  
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
